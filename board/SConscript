import os
import rtconfig
from building import *

Import('SDK_LIB')

cwd = GetCurrentDir()

# add general drivers
src = Split('''
board.c
CubeMX_Config/Src/stm32f4xx_hal_msp.c
''')

path =  [cwd]
path += [cwd + '/CubeMX_Config/Inc']
path += [cwd + '/ports']

if GetDepend(['BSP_USING_ETH']):
    src += Glob('ports/phy_reset.c')

if GetDepend(['BSP_USING_SPI_FLASH']):
    src += Glob('ports/spi_flash_init.c')

if GetDepend(['BSP_USING_SDCARD']):
    src += Glob('ports/sdcard_port.c')

if GetDepend(['BSP_USING_AUDIO']):
    src += Glob('ports/audio/drv_sound.c')
    path += [cwd + '/ports/audio']

if GetDepend(['RT_USING_CHERRYUSB']):
    src += Glob('ports/CherryUSB/*.c')
    src += Glob('ports/CherryUSB/demo/*.c')
    path += [cwd + '/ports/CherryUSB']
    path += [cwd + '/ports/CherryUSB/demo']

if GetDepend(['PKG_USING_LVGL']):
    src += Glob('ports/LVGL/*.c')
    path += [cwd + '/ports/LVGL']
    if GetDepend(['BSP_USING_LVGL_DEMO']):
        src += Glob('ports/LVGL/demo/*.c')
        path += [cwd + '/ports/LVGL/demo']
        src += [
            *Glob('ports/LVGL/demo/project/generated/*.c'),
            *Glob('ports/LVGL/demo/project/generated/guider_fonts/*.c'),
            *Glob('ports/LVGL/demo/project/generated/guider_customer_fonts/*.c'),
            *Glob('ports/LVGL/demo/project/custom/*.c'),
            *Glob('ports/LVGL/demo/project/custom/customer_setup_screens/*.c')
        ]
        path += [cwd + '/ports/LVGL/demo/project/generated',
                 cwd + '/ports/LVGL/demo/project/generated/guider_fonts',
                 cwd + '/ports/LVGL/demo/project/generated/guider_customer_fonts',
                 cwd + '/ports/LVGL/demo/project/custom',
                 cwd + '/ports/LVGL/demo/project/custom/customer_setup_screens']


if GetDepend(['BSP_USING_SPI_LCD']):
    src += Glob('ports/lcd/*.c')
    path += [cwd + '/ports/lcd']

if GetDepend(['BSP_USING_NES_C']):
    src += Glob('ports/nes/*.c')
    path += [cwd + '/ports/nes']

src += Glob('ports/romfs.c')

startup_path_prefix = SDK_LIB

if rtconfig.PLATFORM in ['gcc']:
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f429xx.s']
elif rtconfig.PLATFORM in ['armcc', 'armclang']:
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm/startup_stm32f429xx.s']
elif rtconfig.PLATFORM in ['iccarm']:
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar/startup_stm32f429xx.s']

CPPDEFINES = ['STM32F429xx']
group = DefineGroup('Drivers', src, depend = [''], CPPPATH = path, CPPDEFINES = CPPDEFINES)

Return('group')
